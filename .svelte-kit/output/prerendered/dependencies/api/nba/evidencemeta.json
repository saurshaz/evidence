{"queries":[{"id":"thru_date","compiledQueryString":"SELECT COALESCE(max(game_date),CURRENT_DATE) as end_date FROM src_nba_latest_results","inputQueryString":"SELECT COALESCE(max(game_date),CURRENT_DATE) as end_date FROM src_nba_latest_results","compiled":false,"inline":false},{"id":"wins_seed_scatter","compiledQueryString":"SELECT\n    winning_team as team,\n --   wins as wins,\n    conf,\n    count(*) / 10000.0 as odds_pct1,\n    case when season_rank <= 6 then 'top six seed'\n        when season_rank between 7 and 10 then 'play in'\n        else 'missed playoffs'\n    end as season_result,\n    Count(*) FILTER (WHERE season_rank <=6)*-1 AS sort_key\nFROM src_reg_season_end\nGROUP BY ALL\nORDER BY sort_key","inputQueryString":"SELECT\n    winning_team as team,\n --   wins as wins,\n    conf,\n    count(*) / 10000.0 as odds_pct1,\n    case when season_rank <= 6 then 'top six seed'\n        when season_rank between 7 and 10 then 'play in'\n        else 'missed playoffs'\n    end as season_result,\n    Count(*) FILTER (WHERE season_rank <=6)*-1 AS sort_key\nFROM src_reg_season_end\nGROUP BY ALL\nORDER BY sort_key","compiled":false,"inline":false},{"id":"seed_details","compiledQueryString":"SELECT\n    winning_team as team,\n    season_rank as seed,\n    conf,\n    count(*) / 10000.0 as occurances_pct1\nFROM src_reg_season_end\nGROUP BY ALL\nORDER BY seed, count(*) DESC","inputQueryString":"SELECT\n    winning_team as team,\n    season_rank as seed,\n    conf,\n    count(*) / 10000.0 as occurances_pct1\nFROM src_reg_season_end\nGROUP BY ALL\nORDER BY seed, count(*) DESC","compiled":false,"inline":false},{"id":"tournament_seeding","compiledQueryString":"WITH cte_final_seeds AS (\n    SELECT\n        ROW_NUMBER() OVER (PARTITION BY Scenario_id, conf \n            ORDER BY conf, made_wildcard, wins desc, pt_diff desc, random()) AS final_seed,\n        *\n    FROM src_tournament_end\n    WHERE (made_tournament = 1 OR made_wildcard = 1)\n),\ncte_agg AS (\n    SELECT\n        winning_team as team,\n        conf,\n        final_seed,\n        COUNT(*) / 10000.0 as occurances\n    FROM cte_final_seeds\n    GROUP BY ALL\n    ORDER BY conf, final_seed, winning_team\n)\nSELECT\n    team,\n    conf,\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 1 ),0) AS \"1_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 2 ),0) AS \"2_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 3 ),0) AS \"3_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 4 ),0) AS \"4_pct1\",\n    SUM(occurances) AS total_pct1\nFROM cte_agg\nGROUP BY ALL\nORDER BY \"1_pct1\" DESC, (\"1_pct1\"+\"2_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\"+\"4_pct1\") DESC","inputQueryString":"WITH cte_final_seeds AS (\n    SELECT\n        ROW_NUMBER() OVER (PARTITION BY Scenario_id, conf \n            ORDER BY conf, made_wildcard, wins desc, pt_diff desc, random()) AS final_seed,\n        *\n    FROM src_tournament_end\n    WHERE (made_tournament = 1 OR made_wildcard = 1)\n),\ncte_agg AS (\n    SELECT\n        winning_team as team,\n        conf,\n        final_seed,\n        COUNT(*) / 10000.0 as occurances\n    FROM cte_final_seeds\n    GROUP BY ALL\n    ORDER BY conf, final_seed, winning_team\n)\nSELECT\n    team,\n    conf,\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 1 ),0) AS \"1_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 2 ),0) AS \"2_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 3 ),0) AS \"3_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 4 ),0) AS \"4_pct1\",\n    SUM(occurances) AS total_pct1\nFROM cte_agg\nGROUP BY ALL\nORDER BY \"1_pct1\" DESC, (\"1_pct1\"+\"2_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\"+\"4_pct1\") DESC","compiled":false,"inline":false},{"id":"reg_season","compiledQueryString":"select\n  conf,\n  team,\n  case \n    when team = 'CHO' then 'CHA'\n    when team = 'BRK' then 'BKN'\n    when team = 'NOP' then 'NO'\n    when team = 'UTA' then 'UTAH'\n    else team\n  end as team_espn_code,\n  'https://secure.espn.com/combiner/i?img=/i/teamlogos/nba/500/' || team_espn_code || '.png&w=56&h=56' as \" \",\n  elo_rating,\n  avg_wins,\n  COALESCE(made_playoffs / 10000.0,0) as make_playoffs_pct1,\n  COALESCE(won_finals / 10000.0,0) as win_finals_pct1,\n  elo_vs_vegas *-1 as elo_vs_vegas\nfrom src_season_summary\norder by conf, avg_wins desc","inputQueryString":"select\n  conf,\n  team,\n  case \n    when team = 'CHO' then 'CHA'\n    when team = 'BRK' then 'BKN'\n    when team = 'NOP' then 'NO'\n    when team = 'UTA' then 'UTAH'\n    else team\n  end as team_espn_code,\n  'https://secure.espn.com/combiner/i?img=/i/teamlogos/nba/500/' || team_espn_code || '.png&w=56&h=56' as \" \",\n  elo_rating,\n  avg_wins,\n  COALESCE(made_playoffs / 10000.0,0) as make_playoffs_pct1,\n  COALESCE(won_finals / 10000.0,0) as win_finals_pct1,\n  elo_vs_vegas *-1 as elo_vs_vegas\nfrom src_season_summary\norder by conf, avg_wins desc","compiled":false,"inline":false},{"id":"standings","compiledQueryString":"SELECT\n    team,\n    wins::int || '-' || losses::int AS record\nFROM src_reg_season_actuals_enriched","inputQueryString":"SELECT\n    team,\n    wins::int || '-' || losses::int AS record\nFROM src_reg_season_actuals_enriched","compiled":false,"inline":false},{"id":"summary_by_team","compiledQueryString":"select\n  ROW_NUMBER() OVER (PARTITION BY conf ORDER BY avg_wins DESC) AS seed,\n  ROW_NUMBER() OVER (ORDER BY elo_rating DESC) AS elo_rank,\n  '/nba/teams/' || R.team as team_link,\n  R.team,\n  R.\" \",\n  S.record,\n  elo_rating,\n  avg_wins,\n  make_playoffs_pct1,\n  win_finals_pct1,\n  conf,\n  elo_vs_vegas as elo_vs_vegas_num1\nFROM (select\n  conf,\n  team,\n  case \n    when team = 'CHO' then 'CHA'\n    when team = 'BRK' then 'BKN'\n    when team = 'NOP' then 'NO'\n    when team = 'UTA' then 'UTAH'\n    else team\n  end as team_espn_code,\n  'https://secure.espn.com/combiner/i?img=/i/teamlogos/nba/500/' || team_espn_code || '.png&w=56&h=56' as \" \",\n  elo_rating,\n  avg_wins,\n  COALESCE(made_playoffs / 10000.0,0) as make_playoffs_pct1,\n  COALESCE(won_finals / 10000.0,0) as win_finals_pct1,\n  elo_vs_vegas *-1 as elo_vs_vegas\nfrom src_season_summary\norder by conf, avg_wins desc) R\nLEFT JOIN (SELECT\n    team,\n    wins::int || '-' || losses::int AS record\nFROM src_reg_season_actuals_enriched) S ON S.team = R.team\nORDER BY avg_wins DESC","inputQueryString":"select\n  ROW_NUMBER() OVER (PARTITION BY conf ORDER BY avg_wins DESC) AS seed,\n  ROW_NUMBER() OVER (ORDER BY elo_rating DESC) AS elo_rank,\n  '/nba/teams/' || R.team as team_link,\n  R.team,\n  R.\" \",\n  S.record,\n  elo_rating,\n  avg_wins,\n  make_playoffs_pct1,\n  win_finals_pct1,\n  conf,\n  elo_vs_vegas as elo_vs_vegas_num1\nFROM ${reg_season} R\nLEFT JOIN ${standings} S ON S.team = R.team\nORDER BY avg_wins DESC","compiled":true,"inline":false},{"id":"season_summary","compiledQueryString":"select R.*,\n    R.elo_vs_vegas*-1.0 as vs_vegas_num1,\n    R.avg_wins as predicted_wins,\n    (COALESCE(R.made_postseason,0) + COALESCE(R.made_play_in,0) )/ 10000.0 as made_playoffs_pct1,\n    T.team_long\nfrom src_reg_season_summary R\nleft join src_nba_ratings T on R.team = T.team","inputQueryString":"select R.*,\n    R.elo_vs_vegas*-1.0 as vs_vegas_num1,\n    R.avg_wins as predicted_wins,\n    (COALESCE(R.made_postseason,0) + COALESCE(R.made_play_in,0) )/ 10000.0 as made_playoffs_pct1,\n    T.team_long\nfrom src_reg_season_summary R\nleft join src_nba_ratings T on R.team = T.team","compiled":false,"inline":false},{"id":"records_table","compiledQueryString":"SELECT\n    team,\n    'all games' as type,\n    wins,\n    losses,\n    wins::real / (wins+losses)::real as win_pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'at home' as type,\n    home_wins,\n    home_losses,\n    home_wins::real / (home_wins+home_losses)::real as win_pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'away' as type,\n    away_wins,\n    away_losses,\n    away_wins::real / (away_wins+away_losses)::real as win_pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'as favorite',\n    wins_as_favorite,\n    losses_as_favorite,\n    wins_as_favorite::real / (wins_as_favorite+losses_as_favorite)::real as pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'as underdog',\n    wins_as_underdog,\n    losses_as_underdog,\n    wins_as_underdog::real / (wins_as_underdog+losses_as_underdog)::real as pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'vs good teams',\n    wins_vs_good_teams,\n    losses_vs_good_teams,\n    wins_vs_good_teams::real / (wins_vs_good_teams+losses_vs_good_teams)::real as pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'vs bad teams',\n    wins_vs_bad_teams,\n    losses_vs_bad_teams,\n    wins_vs_bad_teams::real / (wins_vs_bad_teams+losses_vs_bad_teams)::real as pct_num3\nFROM src_reg_season_actuals_enriched","inputQueryString":"SELECT\n    team,\n    'all games' as type,\n    wins,\n    losses,\n    wins::real / (wins+losses)::real as win_pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'at home' as type,\n    home_wins,\n    home_losses,\n    home_wins::real / (home_wins+home_losses)::real as win_pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'away' as type,\n    away_wins,\n    away_losses,\n    away_wins::real / (away_wins+away_losses)::real as win_pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'as favorite',\n    wins_as_favorite,\n    losses_as_favorite,\n    wins_as_favorite::real / (wins_as_favorite+losses_as_favorite)::real as pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'as underdog',\n    wins_as_underdog,\n    losses_as_underdog,\n    wins_as_underdog::real / (wins_as_underdog+losses_as_underdog)::real as pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'vs good teams',\n    wins_vs_good_teams,\n    losses_vs_good_teams,\n    wins_vs_good_teams::real / (wins_vs_good_teams+losses_vs_good_teams)::real as pct_num3\nFROM src_reg_season_actuals_enriched\nUNION ALL\nSELECT\n    team,\n    'vs bad teams',\n    wins_vs_bad_teams,\n    losses_vs_bad_teams,\n    wins_vs_bad_teams::real / (wins_vs_bad_teams+losses_vs_bad_teams)::real as pct_num3\nFROM src_reg_season_actuals_enriched","compiled":false,"inline":false},{"id":"elo_latest","compiledQueryString":"SELECT *,\n    elo_rating - original_rating as since_start\nFROM src_nba_latest_elo","inputQueryString":"SELECT *,\n    elo_rating - original_rating as since_start\nFROM src_nba_latest_elo","compiled":false,"inline":false},{"id":"wins_details","compiledQueryString":"SELECT\n    winning_team as team,\n    wins as wins,\n    count(*) as occurances\nFROM src_reg_season_end\nGROUP BY ALL","inputQueryString":"SELECT\n    winning_team as team,\n    wins as wins,\n    count(*) as occurances\nFROM src_reg_season_end\nGROUP BY ALL","compiled":false,"inline":false},{"id":"playoff_wins","compiledQueryString":"SELECT\n    winning_team as team,\n    wins as wins,\n    conf,\n    count(*) / 10000.0 as odds_pct1,\n    case when season_rank <= 6 then 'top six seed'\n        when season_rank between 7 and 10 then 'play in'\n        else 'missed playoffs'\n    end as season_result,\n    Count(*) FILTER (WHERE season_rank <=6)*-1 AS sort_key\nFROM src_reg_season_end\nGROUP BY ALL\nORDER BY sort_key","inputQueryString":"SELECT\n    winning_team as team,\n    wins as wins,\n    conf,\n    count(*) / 10000.0 as odds_pct1,\n    case when season_rank <= 6 then 'top six seed'\n        when season_rank between 7 and 10 then 'play in'\n        else 'missed playoffs'\n    end as season_result,\n    Count(*) FILTER (WHERE season_rank <=6)*-1 AS sort_key\nFROM src_reg_season_end\nGROUP BY ALL\nORDER BY sort_key","compiled":false,"inline":false},{"id":"playoff_odds","compiledQueryString":"SELECT \n    team,\n    COALESCE(SUM(odds_pct1) FILTER (WHERE season_result = 'top six seed'),0) as top_six_pct1,\n    COALESCE(SUM(odds_pct1) FILTER (WHERE season_result = 'play in'),0) as play_in_pct1,\n    COALESCE(SUM(odds_pct1) FILTER (WHERE season_result = 'missed playoffs'),0) as missed_playoffs_pct1\nFROM (SELECT\n    winning_team as team,\n    wins as wins,\n    conf,\n    count(*) / 10000.0 as odds_pct1,\n    case when season_rank <= 6 then 'top six seed'\n        when season_rank between 7 and 10 then 'play in'\n        else 'missed playoffs'\n    end as season_result,\n    Count(*) FILTER (WHERE season_rank <=6)*-1 AS sort_key\nFROM src_reg_season_end\nGROUP BY ALL\nORDER BY sort_key)\nGROUP BY ALL","inputQueryString":"SELECT \n    team,\n    COALESCE(SUM(odds_pct1) FILTER (WHERE season_result = 'top six seed'),0) as top_six_pct1,\n    COALESCE(SUM(odds_pct1) FILTER (WHERE season_result = 'play in'),0) as play_in_pct1,\n    COALESCE(SUM(odds_pct1) FILTER (WHERE season_result = 'missed playoffs'),0) as missed_playoffs_pct1\nFROM ${playoff_wins}\nGROUP BY ALL","compiled":true,"inline":false},{"id":"most_recent_games","compiledQueryString":"SELECT\n    game_date AS date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n    ELSE '' END AS \"T\",\n    vstm AS visiting_team,\n    '@' AS \" \",\n    hmtm AS home_team,\n    CASE \n        WHEN home_team_score > visiting_team_score THEN home_team_score::int || ' - ' || visiting_team_score::int \n        ELSE visiting_team_score::int || ' - ' || home_team_score::int\n    END AS score,\n    winning_team,\n    ABS(elo_change) AS elo_change_num1,\n    type,\n    vstm || ' @ ' || hmtm AS matchup\nFROM src_nba_results_log RL\nORDER BY game_date desc","inputQueryString":"SELECT\n    game_date AS date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n    ELSE '' END AS \"T\",\n    vstm AS visiting_team,\n    '@' AS \" \",\n    hmtm AS home_team,\n    CASE \n        WHEN home_team_score > visiting_team_score THEN home_team_score::int || ' - ' || visiting_team_score::int \n        ELSE visiting_team_score::int || ' - ' || home_team_score::int\n    END AS score,\n    winning_team,\n    ABS(elo_change) AS elo_change_num1,\n    type,\n    vstm || ' @ ' || hmtm AS matchup\nFROM src_nba_results_log RL\nORDER BY game_date desc","compiled":false,"inline":false},{"id":"game_trend","compiledQueryString":"with cte_games AS (\nSELECT 0 as game_id, team, original_rating as elo_rating, 0 as elo_change \nFROM src_nba_latest_elo\nUNION ALL\nSELECT game_id, vstm as team, visiting_team_elo_rating as elo_rating, elo_change\nFROM src_nba_results_log\nUNION ALL\nSELECT game_id, hmtm as team, home_team_elo_rating as elo_rating, elo_change*-1 as elo_change\nFROM src_nba_results_log )\nSELECT \n    COALESCE(AR.game_date,'2023-10-23')::date AS date,\n    RL.team, \n    RL.elo_rating, \n    RL.elo_change,\n    sum(RL.elo_change) over (partition by team order by COALESCE(AR.game_date,'2023-10-23') asc rows between unbounded preceding and current row) as cumulative_elo_change_num0,\n    RL.elo_rating + RL.elo_change AS elo_post\nFROM cte_games RL\nLEFT JOIN src_nba_results_log AR ON AR.game_id = RL.game_id\nORDER BY date","inputQueryString":"with cte_games AS (\nSELECT 0 as game_id, team, original_rating as elo_rating, 0 as elo_change \nFROM src_nba_latest_elo\nUNION ALL\nSELECT game_id, vstm as team, visiting_team_elo_rating as elo_rating, elo_change\nFROM src_nba_results_log\nUNION ALL\nSELECT game_id, hmtm as team, home_team_elo_rating as elo_rating, elo_change*-1 as elo_change\nFROM src_nba_results_log )\nSELECT \n    COALESCE(AR.game_date,'2023-10-23')::date AS date,\n    RL.team, \n    RL.elo_rating, \n    RL.elo_change,\n    sum(RL.elo_change) over (partition by team order by COALESCE(AR.game_date,'2023-10-23') asc rows between unbounded preceding and current row) as cumulative_elo_change_num0,\n    RL.elo_rating + RL.elo_change AS elo_post\nFROM cte_games RL\nLEFT JOIN src_nba_results_log AR ON AR.game_id = RL.game_id\nORDER BY date","compiled":false,"inline":false},{"id":"future_games","compiledQueryString":"SELECT\n    game_id,\n    date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n        ELSE '' END \n    AS \"T\",\n    visiting_team as visitor,\n    visiting_team_elo_rating AS visitor_ELO,\n    home_team as home, \n    home_team_elo_rating AS home_ELO,\n    home_team_elo_rating - visiting_team_elo_rating AS elo_diff,\n    elo_diff + 100 AS elo_diff_hfa,\n    home_team_win_probability/10000 AS home_win_pct1,\n    american_odds,\n    implied_line AS implied_line_num1,\n    predicted_score,\n    type,\n    '/nba/predictions/' || (game_id::int) as game_link\nFROM src_reg_season_predictions\nWHERE include_actuals = false AND winning_team = home_team\nORDER BY game_id","inputQueryString":"SELECT\n    game_id,\n    date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n        ELSE '' END \n    AS \"T\",\n    visiting_team as visitor,\n    visiting_team_elo_rating AS visitor_ELO,\n    home_team as home, \n    home_team_elo_rating AS home_ELO,\n    home_team_elo_rating - visiting_team_elo_rating AS elo_diff,\n    elo_diff + 100 AS elo_diff_hfa,\n    home_team_win_probability/10000 AS home_win_pct1,\n    american_odds,\n    implied_line AS implied_line_num1,\n    predicted_score,\n    type,\n    '/nba/predictions/' || (game_id::int) as game_link\nFROM src_reg_season_predictions\nWHERE include_actuals = false AND winning_team = home_team\nORDER BY game_id","compiled":false,"inline":false},{"id":"aaa","compiledQueryString":"select  conf, count(conf) as _count from src_nba_teams where conf like '${inputs.conference}' group by conf order by _count desc","inputQueryString":"select  conf, count(conf) as _count from src_nba_teams where conf like '${inputs.conference}' group by conf order by _count desc","compiled":false,"inline":true},{"id":"pieTestData1","compiledQueryString":"select  count(conf) as value, conf as name from src_nba_teams where conf like '${inputs.conference}' group by name order by value desc","inputQueryString":"select  count(conf) as value, conf as name from src_nba_teams where conf like '${inputs.conference}' group by name order by value desc","compiled":false,"inline":true},{"id":"pieTestData2","compiledQueryString":"select  tournament_group as name, count(tournament_group) as value, count(conf) as value from src_nba_teams where conf like '${inputs.conference}' group by name, tournament_group order by value desc","inputQueryString":"select  tournament_group as name, count(tournament_group) as value, count(conf) as value from src_nba_teams where conf like '${inputs.conference}' group by name, tournament_group order by value desc","compiled":false,"inline":true},{"id":"teams","compiledQueryString":"select * from src_nba_teams\norder by team","inputQueryString":"select * from src_nba_teams\norder by team","compiled":false,"inline":true},{"id":"filtered_future_games","compiledQueryString":"select *\n    from (SELECT\n    game_id,\n    date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n        ELSE '' END \n    AS \"T\",\n    visiting_team as visitor,\n    visiting_team_elo_rating AS visitor_ELO,\n    home_team as home, \n    home_team_elo_rating AS home_ELO,\n    home_team_elo_rating - visiting_team_elo_rating AS elo_diff,\n    elo_diff + 100 AS elo_diff_hfa,\n    home_team_win_probability/10000 AS home_win_pct1,\n    american_odds,\n    implied_line AS implied_line_num1,\n    predicted_score,\n    type,\n    '/nba/predictions/' || (game_id::int) as game_link\nFROM src_reg_season_predictions\nWHERE include_actuals = false AND winning_team = home_team\nORDER BY game_id)\n    where home like '${inputs.team_dd.value}' OR visitor like '${inputs.team_dd.value}'","inputQueryString":"select *\n    from ${future_games}\n    where home like '${inputs.team_dd.value}' OR visitor like '${inputs.team_dd.value}'","compiled":true,"inline":true}]}