{"queries":[{"id":"elo_history","compiledQueryString":"from src_nba_elo_history","inputQueryString":"from src_nba_elo_history","compiled":false,"inline":true},{"id":"seasons","compiledQueryString":"select A.season\n    from src_nba_seasons A\n    order by A.season","inputQueryString":"select A.season\n    from src_nba_seasons A\n    order by A.season","compiled":false,"inline":true},{"id":"team1","compiledQueryString":"select C.*\n    from src_nba_season_teams C\n    where C.season = ${inputs.team1_season_dd.value}\n    group by all\n    order by C.team","inputQueryString":"select C.*\n    from src_nba_season_teams C\n    where C.season = ${inputs.team1_season_dd.value}\n    group by all\n    order by C.team","compiled":false,"inline":true},{"id":"team2","compiledQueryString":"select C.* \n    from src_nba_season_teams C\n    where C.season = ${inputs.team2_season_dd.value}\n    group by all\n    order by C.team","inputQueryString":"select C.* \n    from src_nba_season_teams C\n    where C.season = ${inputs.team2_season_dd.value}\n    group by all\n    order by C.team","compiled":false,"inline":true},{"id":"team1_history","compiledQueryString":"select * from (from src_nba_elo_history)\n    where season = ${inputs.team1_season_dd.value}\n       and ( team1 = '${inputs.team1_dd.value}' OR team2 = '${inputs.team1_dd.value}')\n    order by date","inputQueryString":"select * from ${elo_history}\n    where season = ${inputs.team1_season_dd.value}\n       and ( team1 = '${inputs.team1_dd.value}' OR team2 = '${inputs.team1_dd.value}')\n    order by date","compiled":true,"inline":true},{"id":"team2_history","compiledQueryString":"select * from (from src_nba_elo_history)\n    where season = ${inputs.team2_season_dd.value}\n        and ( team1 = '${inputs.team2_dd.value}' OR team2 = '${inputs.team2_dd.value}')\n    order by date","inputQueryString":"select * from ${elo_history}\n    where season = ${inputs.team2_season_dd.value}\n        and ( team1 = '${inputs.team2_dd.value}' OR team2 = '${inputs.team2_dd.value}')\n    order by date","compiled":true,"inline":true},{"id":"team1_stats","compiledQueryString":"select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}","inputQueryString":"select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}","compiled":false,"inline":true},{"id":"team2_stats","compiledQueryString":"select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}","inputQueryString":"select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}","compiled":false,"inline":true},{"id":"stat_table","compiledQueryString":"with cte_combined as (\n        select * from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value})\n        union all\n        select * from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value})\n    ),\n    cte_unpivot as (\n        UNPIVOT cte_combined\n        ON COLUMNS(* EXCLUDE (key, ct, team, season))\n        INTO\n            NAME stat\n            VALUE value\n    ),\n    cte_stats as (\n        select distinct stat\n        from cte_unpivot\n    )\n    select \n        CASE WHEN u1.value > u2.value THEN '✅' ELSE '' END AS \"t1\",\n        abs(u1.value::int) as \"team1\",\n        s.stat,\n        abs(u2.value::int) as \"team2\",\n        CASE WHEN u2.value > u1.value THEN '✅' ELSE '' END AS \"t2\"\n    from cte_stats s\n    left join cte_unpivot u1 on u1.stat = s.stat and u1.key = '${inputs.team1_dd.value}' || ':' || '${inputs.team1_season_dd.value}'\n    left join cte_unpivot u2 on u2.stat = s.stat and u2.key = '${inputs.team2_dd.value}' || ':' || '${inputs.team2_season_dd.value}'","inputQueryString":"with cte_combined as (\n        select * from ${team1_stats}\n        union all\n        select * from ${team2_stats}\n    ),\n    cte_unpivot as (\n        UNPIVOT cte_combined\n        ON COLUMNS(* EXCLUDE (key, ct, team, season))\n        INTO\n            NAME stat\n            VALUE value\n    ),\n    cte_stats as (\n        select distinct stat\n        from cte_unpivot\n    )\n    select \n        CASE WHEN u1.value > u2.value THEN '✅' ELSE '' END AS \"t1\",\n        abs(u1.value::int) as \"team1\",\n        s.stat,\n        abs(u2.value::int) as \"team2\",\n        CASE WHEN u2.value > u1.value THEN '✅' ELSE '' END AS \"t2\"\n    from cte_stats s\n    left join cte_unpivot u1 on u1.stat = s.stat and u1.key = '${inputs.team1_dd.value}' || ':' || '${inputs.team1_season_dd.value}'\n    left join cte_unpivot u2 on u2.stat = s.stat and u2.key = '${inputs.team2_dd.value}' || ':' || '${inputs.team2_season_dd.value}'","compiled":true,"inline":true},{"id":"team1_trend","compiledQueryString":"with cte_games AS (\n        select \n            date,\n            case when team1 = '${inputs.team1_dd.value}' then elo1_post else elo2_post end as elo,\n            '${inputs.team1_dd.value}' || ':' || '${inputs.team1_season_dd.value}' as key,\n        from (from src_nba_elo_history) where (team1 = '${inputs.team1_dd.value}' OR team2 = '${inputs.team1_dd.value}') AND season = ${inputs.team1_season_dd.value}\n    )\n    select \n        key, \n        date,\n        elo,\n        '${inputs.team1_season_dd.value}' || ' ' || '${inputs.team1_dd.value}' as team,\n        ROW_NUMBER() OVER (ORDER BY date) as game_id\n    from cte_games","inputQueryString":"with cte_games AS (\n        select \n            date,\n            case when team1 = '${inputs.team1_dd.value}' then elo1_post else elo2_post end as elo,\n            '${inputs.team1_dd.value}' || ':' || '${inputs.team1_season_dd.value}' as key,\n        from ${elo_history  } where (team1 = '${inputs.team1_dd.value}' OR team2 = '${inputs.team1_dd.value}') AND season = ${inputs.team1_season_dd.value}\n    )\n    select \n        key, \n        date,\n        elo,\n        '${inputs.team1_season_dd.value}' || ' ' || '${inputs.team1_dd.value}' as team,\n        ROW_NUMBER() OVER (ORDER BY date) as game_id\n    from cte_games","compiled":true,"inline":true},{"id":"team2_trend","compiledQueryString":"with cte_games AS (\n        select \n            date,\n            case when team1 = '${inputs.team2_dd.value}' then elo1_post else elo2_post end as elo,\n            '${inputs.team2_dd.value}' || ':' || '${inputs.team2_season_dd.value}' as key,\n        from (from src_nba_elo_history) where (team1 = '${inputs.team2_dd.value}' OR team2 = '${inputs.team2_dd.value}') \n        AND season = ${inputs.team2_season_dd.value}\n    )\n    select \n        key, \n        date,\n        elo,\n        '${inputs.team2_season_dd.value}' || ' ' || '${inputs.team2_dd.value}' as team,\n        ROW_NUMBER() OVER (ORDER BY date) as game_id\n    from cte_games","inputQueryString":"with cte_games AS (\n        select \n            date,\n            case when team1 = '${inputs.team2_dd.value}' then elo1_post else elo2_post end as elo,\n            '${inputs.team2_dd.value}' || ':' || '${inputs.team2_season_dd.value}' as key,\n        from ${elo_history  } where (team1 = '${inputs.team2_dd.value}' OR team2 = '${inputs.team2_dd.value}') \n        AND season = ${inputs.team2_season_dd.value}\n    )\n    select \n        key, \n        date,\n        elo,\n        '${inputs.team2_season_dd.value}' || ' ' || '${inputs.team2_dd.value}' as team,\n        ROW_NUMBER() OVER (ORDER BY date) as game_id\n    from cte_games","compiled":true,"inline":true},{"id":"combined_trend","compiledQueryString":"select * from (with cte_games AS (\n        select \n            date,\n            case when team1 = '${inputs.team1_dd.value}' then elo1_post else elo2_post end as elo,\n            '${inputs.team1_dd.value}' || ':' || '${inputs.team1_season_dd.value}' as key,\n        from (from src_nba_elo_history) where (team1 = '${inputs.team1_dd.value}' OR team2 = '${inputs.team1_dd.value}') AND season = ${inputs.team1_season_dd.value}\n    )\n    select \n        key, \n        date,\n        elo,\n        '${inputs.team1_season_dd.value}' || ' ' || '${inputs.team1_dd.value}' as team,\n        ROW_NUMBER() OVER (ORDER BY date) as game_id\n    from cte_games)\n    union all\n    select * from (with cte_games AS (\n        select \n            date,\n            case when team1 = '${inputs.team2_dd.value}' then elo1_post else elo2_post end as elo,\n            '${inputs.team2_dd.value}' || ':' || '${inputs.team2_season_dd.value}' as key,\n        from (from src_nba_elo_history) where (team1 = '${inputs.team2_dd.value}' OR team2 = '${inputs.team2_dd.value}') \n        AND season = ${inputs.team2_season_dd.value}\n    )\n    select \n        key, \n        date,\n        elo,\n        '${inputs.team2_season_dd.value}' || ' ' || '${inputs.team2_dd.value}' as team,\n        ROW_NUMBER() OVER (ORDER BY date) as game_id\n    from cte_games)","inputQueryString":"select * from ${team1_trend}\n    union all\n    select * from ${team2_trend}","compiled":true,"inline":true},{"id":"elo_by_team","compiledQueryString":"select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}) t2\n    left join (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}) t1 ON 1=1","inputQueryString":"select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from ${team2_stats} t2\n    left join ${team1_stats} t1 ON 1=1","compiled":true,"inline":true},{"id":"games","compiledQueryString":"SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I","inputQueryString":"SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I","compiled":false,"inline":true},{"id":"monte_carlo_sim","compiledQueryString":"WITH cte_scenario_gen AS (\n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I\n    ),\n    cte_schedule as (\n        SELECT\n            i.scenario_id,\n            G.game_id,\n            S.*,\n            (random() * 10000)::smallint AS rand_result\n        FROM cte_scenario_gen AS i\n        CROSS JOIN (select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}) t2\n    left join (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}) t1 ON 1=1) AS S\n        LEFT JOIN (SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I) G ON 1=1\n    ),\n    cte_step_1 as (\n        Select *,\n            ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000 as team1_win_probability,\n            CASE \n                WHEN ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000  >= rand_result THEN S.team1\n                ELSE S.team2\n            END AS winning_team,\n        From cte_schedule S\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, winning_team  ORDER BY scenario_id, game_id ) +\n            CASE \n                WHEN winning_team = team1 THEN ${inputs.team_1_wins.value} \n                ELSE ${inputs.team_2_wins.value} END \n            AS series_result\n        FROM cte_step_1 step1\n    )\n    select * from cte_step_2","inputQueryString":"WITH cte_scenario_gen AS (\n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I\n    ),\n    cte_schedule as (\n        SELECT\n            i.scenario_id,\n            G.game_id,\n            S.*,\n            (random() * 10000)::smallint AS rand_result\n        FROM cte_scenario_gen AS i\n        CROSS JOIN ${elo_by_team} AS S\n        LEFT JOIN ${games} G ON 1=1\n    ),\n    cte_step_1 as (\n        Select *,\n            ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000 as team1_win_probability,\n            CASE \n                WHEN ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000  >= rand_result THEN S.team1\n                ELSE S.team2\n            END AS winning_team,\n        From cte_schedule S\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, winning_team  ORDER BY scenario_id, game_id ) +\n            CASE \n                WHEN winning_team = team1 THEN ${inputs.team_1_wins.value} \n                ELSE ${inputs.team_2_wins.value} END \n            AS series_result\n        FROM cte_step_1 step1\n    )\n    select * from cte_step_2","compiled":true,"inline":true},{"id":"monte_carlo_winners","compiledQueryString":"SELECT scenario_id,\n        game_id\n    FROM (WITH cte_scenario_gen AS (\n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I\n    ),\n    cte_schedule as (\n        SELECT\n            i.scenario_id,\n            G.game_id,\n            S.*,\n            (random() * 10000)::smallint AS rand_result\n        FROM cte_scenario_gen AS i\n        CROSS JOIN (select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}) t2\n    left join (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}) t1 ON 1=1) AS S\n        LEFT JOIN (SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I) G ON 1=1\n    ),\n    cte_step_1 as (\n        Select *,\n            ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000 as team1_win_probability,\n            CASE \n                WHEN ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000  >= rand_result THEN S.team1\n                ELSE S.team2\n            END AS winning_team,\n        From cte_schedule S\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, winning_team  ORDER BY scenario_id, game_id ) +\n            CASE \n                WHEN winning_team = team1 THEN ${inputs.team_1_wins.value} \n                ELSE ${inputs.team_2_wins.value} END \n            AS series_result\n        FROM cte_step_1 step1\n    )\n    select * from cte_step_2)\n    WHERE series_result = 4","inputQueryString":"SELECT scenario_id,\n        game_id\n    FROM ${monte_carlo_sim}\n    WHERE series_result = 4","compiled":true,"inline":true},{"id":"mc_final_results","compiledQueryString":"with\n    cte_summary as (\n        SELECT step2.* \n        FROM (WITH cte_scenario_gen AS (\n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I\n    ),\n    cte_schedule as (\n        SELECT\n            i.scenario_id,\n            G.game_id,\n            S.*,\n            (random() * 10000)::smallint AS rand_result\n        FROM cte_scenario_gen AS i\n        CROSS JOIN (select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}) t2\n    left join (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}) t1 ON 1=1) AS S\n        LEFT JOIN (SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I) G ON 1=1\n    ),\n    cte_step_1 as (\n        Select *,\n            ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000 as team1_win_probability,\n            CASE \n                WHEN ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000  >= rand_result THEN S.team1\n                ELSE S.team2\n            END AS winning_team,\n        From cte_schedule S\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, winning_team  ORDER BY scenario_id, game_id ) +\n            CASE \n                WHEN winning_team = team1 THEN ${inputs.team_1_wins.value} \n                ELSE ${inputs.team_2_wins.value} END \n            AS series_result\n        FROM cte_step_1 step1\n    )\n    select * from cte_step_2) step2\n            LEFT JOIN (SELECT scenario_id,\n        game_id\n    FROM (WITH cte_scenario_gen AS (\n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I\n    ),\n    cte_schedule as (\n        SELECT\n            i.scenario_id,\n            G.game_id,\n            S.*,\n            (random() * 10000)::smallint AS rand_result\n        FROM cte_scenario_gen AS i\n        CROSS JOIN (select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}) t2\n    left join (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}) t1 ON 1=1) AS S\n        LEFT JOIN (SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I) G ON 1=1\n    ),\n    cte_step_1 as (\n        Select *,\n            ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000 as team1_win_probability,\n            CASE \n                WHEN ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000  >= rand_result THEN S.team1\n                ELSE S.team2\n            END AS winning_team,\n        From cte_schedule S\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, winning_team  ORDER BY scenario_id, game_id ) +\n            CASE \n                WHEN winning_team = team1 THEN ${inputs.team_1_wins.value} \n                ELSE ${inputs.team_2_wins.value} END \n            AS series_result\n        FROM cte_step_1 step1\n    )\n    select * from cte_step_2)\n    WHERE series_result = 4) F ON F.scenario_id = step2.scenario_id \n                AND step2.game_id = f.game_id\n    )\n    SELECT\n        E.scenario_id,\n        E.game_id,\n        E.winning_team\n    FROM cte_summary E\n    where E.series_result = 4","inputQueryString":"with\n    cte_summary as (\n        SELECT step2.* \n        FROM ${monte_carlo_sim} step2\n            LEFT JOIN ${monte_carlo_winners} F ON F.scenario_id = step2.scenario_id \n                AND step2.game_id = f.game_id\n    )\n    SELECT\n        E.scenario_id,\n        E.game_id,\n        E.winning_team\n    FROM cte_summary E\n    where E.series_result = 4","compiled":true,"inline":true},{"id":"mc_summary","compiledQueryString":"select\n        winning_team,\n        game_id as games_played,\n        case when game_id = 4 then '4-0'\n            when game_id = 5 then '4-1'\n            when game_id = 6 then '4-2'\n            else '4-3'\n        end as result,\n        count(*) as occurances,\n        count(*) / 10000.0 as occurances_pct1\n    from (with\n    cte_summary as (\n        SELECT step2.* \n        FROM (WITH cte_scenario_gen AS (\n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I\n    ),\n    cte_schedule as (\n        SELECT\n            i.scenario_id,\n            G.game_id,\n            S.*,\n            (random() * 10000)::smallint AS rand_result\n        FROM cte_scenario_gen AS i\n        CROSS JOIN (select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}) t2\n    left join (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}) t1 ON 1=1) AS S\n        LEFT JOIN (SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I) G ON 1=1\n    ),\n    cte_step_1 as (\n        Select *,\n            ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000 as team1_win_probability,\n            CASE \n                WHEN ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000  >= rand_result THEN S.team1\n                ELSE S.team2\n            END AS winning_team,\n        From cte_schedule S\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, winning_team  ORDER BY scenario_id, game_id ) +\n            CASE \n                WHEN winning_team = team1 THEN ${inputs.team_1_wins.value} \n                ELSE ${inputs.team_2_wins.value} END \n            AS series_result\n        FROM cte_step_1 step1\n    )\n    select * from cte_step_2) step2\n            LEFT JOIN (SELECT scenario_id,\n        game_id\n    FROM (WITH cte_scenario_gen AS (\n        SELECT I.generate_series AS scenario_id\n        FROM generate_series(1, 10000 ) AS I\n    ),\n    cte_schedule as (\n        SELECT\n            i.scenario_id,\n            G.game_id,\n            S.*,\n            (random() * 10000)::smallint AS rand_result\n        FROM cte_scenario_gen AS i\n        CROSS JOIN (select \n        (t2.season::varchar(4))[1:4] || ' ' || t2.team as team2,\n        t2.avg_elo - ('${inputs.elo_slider}'::real/2) as elo2,\n       (t1.season::varchar(4))[1:4] || ' ' || t1.team as team1,\n        t1.avg_elo + ('${inputs.elo_slider}'::real/2) as elo1\n    from (select * \n    from src_nba_team_stats \n    where team = '${inputs.team2_dd.value}' AND season = ${inputs.team2_season_dd.value}) t2\n    left join (select * \n    from src_nba_team_stats \n    where team = '${inputs.team1_dd.value}' AND season = ${inputs.team1_season_dd.value}) t1 ON 1=1) AS S\n        LEFT JOIN (SELECT I.generate_series AS game_id\n    FROM generate_series(1 + ${inputs.team_1_wins.value} + ${inputs.team_2_wins.value}, 7) AS I) G ON 1=1\n    ),\n    cte_step_1 as (\n        Select *,\n            ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000 as team1_win_probability,\n            CASE \n                WHEN ( 1 - (1 / (10 ^ (-( elo2 - elo1 )::real/400)+1))) * 10000  >= rand_result THEN S.team1\n                ELSE S.team2\n            END AS winning_team,\n        From cte_schedule S\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, winning_team  ORDER BY scenario_id, game_id ) +\n            CASE \n                WHEN winning_team = team1 THEN ${inputs.team_1_wins.value} \n                ELSE ${inputs.team_2_wins.value} END \n            AS series_result\n        FROM cte_step_1 step1\n    )\n    select * from cte_step_2)\n    WHERE series_result = 4) F ON F.scenario_id = step2.scenario_id \n                AND step2.game_id = f.game_id\n    )\n    SELECT\n        E.scenario_id,\n        E.game_id,\n        E.winning_team\n    FROM cte_summary E\n    where E.series_result = 4)\n    group by all\n    order by result","inputQueryString":"select\n        winning_team,\n        game_id as games_played,\n        case when game_id = 4 then '4-0'\n            when game_id = 5 then '4-1'\n            when game_id = 6 then '4-2'\n            else '4-3'\n        end as result,\n        count(*) as occurances,\n        count(*) / 10000.0 as occurances_pct1\n    from ${mc_final_results}\n    group by all\n    order by result","compiled":true,"inline":true}]}