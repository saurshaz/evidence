{"queries":[{"id":"future_games","compiledQueryString":"SELECT\n    game_id,\n    date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n        ELSE '' END \n    AS \"T\",\n    visiting_team as visitor,\n    visiting_team_elo_rating AS visitor_ELO,\n    home_team as home, \n    home_team_elo_rating AS home_ELO,\n    home_team_elo_rating - visiting_team_elo_rating AS elo_diff,\n    elo_diff + 100 AS elo_diff_hfa,\n    home_team_win_probability/10000 AS home_win_pct1,\n    american_odds,\n    implied_line AS implied_line_num1,\n    predicted_score,\n    type,\n    '/nba/predictions/' || (game_id::int) as game_link\nFROM src_reg_season_predictions\nWHERE include_actuals = false AND winning_team = home_team\nORDER BY game_id","inputQueryString":"SELECT\n    game_id,\n    date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n        ELSE '' END \n    AS \"T\",\n    visiting_team as visitor,\n    visiting_team_elo_rating AS visitor_ELO,\n    home_team as home, \n    home_team_elo_rating AS home_ELO,\n    home_team_elo_rating - visiting_team_elo_rating AS elo_diff,\n    elo_diff + 100 AS elo_diff_hfa,\n    home_team_win_probability/10000 AS home_win_pct1,\n    american_odds,\n    implied_line AS implied_line_num1,\n    predicted_score,\n    type,\n    '/nba/predictions/' || (game_id::int) as game_link\nFROM src_reg_season_predictions\nWHERE include_actuals = false AND winning_team = home_team\nORDER BY game_id","compiled":false,"inline":false},{"id":"past_games","compiledQueryString":"SELECT *,\n    CASE\n        WHEN (home_team_win_probability > 5000.0 AND winning_team = home_team)\n            OR (home_team_win_probability < 5000.0 AND winning_team = visiting_team)\n            THEN 1 ELSE 0 END AS 'accurate_guess'\nFROM src_reg_season_predictions\nWHERE include_actuals = true\nORDER BY game_id","inputQueryString":"SELECT *,\n    CASE\n        WHEN (home_team_win_probability > 5000.0 AND winning_team = home_team)\n            OR (home_team_win_probability < 5000.0 AND winning_team = visiting_team)\n            THEN 1 ELSE 0 END AS 'accurate_guess'\nFROM src_reg_season_predictions\nWHERE include_actuals = true\nORDER BY game_id","compiled":false,"inline":false},{"id":"tournament_standings","compiledQueryString":"WITH cte_wins AS (\n    SELECT\n        S.winning_team,\n        COUNT(*) AS wins\n    FROM (SELECT *,\n    CASE\n        WHEN (home_team_win_probability > 5000.0 AND winning_team = home_team)\n            OR (home_team_win_probability < 5000.0 AND winning_team = visiting_team)\n            THEN 1 ELSE 0 END AS 'accurate_guess'\nFROM src_reg_season_predictions\nWHERE include_actuals = true\nORDER BY game_id) S\n    WHERE s.type = 'tournament'\n    GROUP BY ALL\n),\ncte_losses AS (\n    SELECT\n        CASE WHEN S.home_team = S.winning_team \n            THEN S.visiting_team ELSE S.home_team\n        END AS losing_team,\n        COUNT(*) AS losses\n    FROM (SELECT *,\n    CASE\n        WHEN (home_team_win_probability > 5000.0 AND winning_team = home_team)\n            OR (home_team_win_probability < 5000.0 AND winning_team = visiting_team)\n            THEN 1 ELSE 0 END AS 'accurate_guess'\nFROM src_reg_season_predictions\nWHERE include_actuals = true\nORDER BY game_id) S\n    WHERE s.type = 'tournament'\n    GROUP BY ALL\n),\ncte_scores AS (\n    FROM src_nba_results_by_team\n    SELECT\n        team,\n        avg(score) as pts,\n        sum(margin) as margin\n    WHERE type = 'tournament'\n    group by all\n)\nSELECT \n    T.team,\n    '/nba/teams/' || T.team as team_link,\n    T.conf,\n    COALESCE(W.wins,0) AS wins,\n    COALESCE(L.losses,0) as losses,\n    COALESCE(W.wins,0) || '-' || COALESCE(L.losses,0) AS record,\n    coalesce(S.margin,0) as margin,\n    CASE WHEN S.margin > 0 THEN '+' || margin ELSE margin::varchar END AS pt_diff,   \n    T.tournament_group as group,\n    R.won_group AS won_group_pct1,\n    R.made_wildcard AS won_wildcard_pct1,\n    R.made_tournament AS made_tournament_pct1,\n    ROUND(R.wins,1) || '-' || ROUND(R.losses,1) AS proj_record \nFROM src_nba_teams T\n    LEFT JOIN cte_wins W ON W.winning_team = T.team\n    LEFT JOIN cte_losses L ON L .losing_team = T.team\n    LEFT JOIN (SELECT\n    winning_team,\n    tournament_group,\n    sum(made_tournament) / 10000.0 as won_group,\n    sum(made_wildcard) / 10000.0 as made_wildcard,\n    sum(made_tournament) / 10000.0 + sum(made_wildcard) / 10000.0 as made_tournament,\n    avg(wins) as wins,\n    avg(losses) as losses\nFROM src_tournament_end\nGROUP BY ALL\nORDER BY tournament_group, made_tournament DESC) R ON R.winning_team = T.team\n    LEFT JOIN cte_scores S ON S.team = T.team\nGROUP BY ALL\nORDER BY T.tournament_group,  wins DESC, won_group DESC, made_tournament_pct1 DESC, margin DESC","inputQueryString":"WITH cte_wins AS (\n    SELECT\n        S.winning_team,\n        COUNT(*) AS wins\n    FROM ${past_games} S\n    WHERE s.type = 'tournament'\n    GROUP BY ALL\n),\ncte_losses AS (\n    SELECT\n        CASE WHEN S.home_team = S.winning_team \n            THEN S.visiting_team ELSE S.home_team\n        END AS losing_team,\n        COUNT(*) AS losses\n    FROM ${past_games} S\n    WHERE s.type = 'tournament'\n    GROUP BY ALL\n),\ncte_scores AS (\n    FROM src_nba_results_by_team\n    SELECT\n        team,\n        avg(score) as pts,\n        sum(margin) as margin\n    WHERE type = 'tournament'\n    group by all\n)\nSELECT \n    T.team,\n    '/nba/teams/' || T.team as team_link,\n    T.conf,\n    COALESCE(W.wins,0) AS wins,\n    COALESCE(L.losses,0) as losses,\n    COALESCE(W.wins,0) || '-' || COALESCE(L.losses,0) AS record,\n    coalesce(S.margin,0) as margin,\n    CASE WHEN S.margin > 0 THEN '+' || margin ELSE margin::varchar END AS pt_diff,   \n    T.tournament_group as group,\n    R.won_group AS won_group_pct1,\n    R.made_wildcard AS won_wildcard_pct1,\n    R.made_tournament AS made_tournament_pct1,\n    ROUND(R.wins,1) || '-' || ROUND(R.losses,1) AS proj_record \nFROM src_nba_teams T\n    LEFT JOIN cte_wins W ON W.winning_team = T.team\n    LEFT JOIN cte_losses L ON L .losing_team = T.team\n    LEFT JOIN ${tournament_results} R ON R.winning_team = T.team\n    LEFT JOIN cte_scores S ON S.team = T.team\nGROUP BY ALL\nORDER BY T.tournament_group,  wins DESC, won_group DESC, made_tournament_pct1 DESC, margin DESC","compiled":true,"inline":false},{"id":"tournament_results","compiledQueryString":"SELECT\n    winning_team,\n    tournament_group,\n    sum(made_tournament) / 10000.0 as won_group,\n    sum(made_wildcard) / 10000.0 as made_wildcard,\n    sum(made_tournament) / 10000.0 + sum(made_wildcard) / 10000.0 as made_tournament,\n    avg(wins) as wins,\n    avg(losses) as losses\nFROM src_tournament_end\nGROUP BY ALL\nORDER BY tournament_group, made_tournament DESC","inputQueryString":"SELECT\n    winning_team,\n    tournament_group,\n    sum(made_tournament) / 10000.0 as won_group,\n    sum(made_wildcard) / 10000.0 as made_wildcard,\n    sum(made_tournament) / 10000.0 + sum(made_wildcard) / 10000.0 as made_tournament,\n    avg(wins) as wins,\n    avg(losses) as losses\nFROM src_tournament_end\nGROUP BY ALL\nORDER BY tournament_group, made_tournament DESC","compiled":false,"inline":false},{"id":"most_recent_games","compiledQueryString":"SELECT\n    game_date AS date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n    ELSE '' END AS \"T\",\n    vstm AS visiting_team,\n    '@' AS \" \",\n    hmtm AS home_team,\n    CASE \n        WHEN home_team_score > visiting_team_score THEN home_team_score::int || ' - ' || visiting_team_score::int \n        ELSE visiting_team_score::int || ' - ' || home_team_score::int\n    END AS score,\n    winning_team,\n    ABS(elo_change) AS elo_change_num1,\n    type,\n    vstm || ' @ ' || hmtm AS matchup\nFROM src_nba_results_log RL\nORDER BY game_date desc","inputQueryString":"SELECT\n    game_date AS date,\n    CASE WHEN type = 'tournament' THEN '🏆' \n        WHEN type = 'knockout' THEN '🥊'\n    ELSE '' END AS \"T\",\n    vstm AS visiting_team,\n    '@' AS \" \",\n    hmtm AS home_team,\n    CASE \n        WHEN home_team_score > visiting_team_score THEN home_team_score::int || ' - ' || visiting_team_score::int \n        ELSE visiting_team_score::int || ' - ' || home_team_score::int\n    END AS score,\n    winning_team,\n    ABS(elo_change) AS elo_change_num1,\n    type,\n    vstm || ' @ ' || hmtm AS matchup\nFROM src_nba_results_log RL\nORDER BY game_date desc","compiled":false,"inline":false},{"id":"tournament_seeding","compiledQueryString":"WITH cte_final_seeds AS (\n    SELECT\n        ROW_NUMBER() OVER (PARTITION BY Scenario_id, conf \n            ORDER BY conf, made_wildcard, wins desc, pt_diff desc, random()) AS final_seed,\n        *\n    FROM src_tournament_end\n    WHERE (made_tournament = 1 OR made_wildcard = 1)\n),\ncte_agg AS (\n    SELECT\n        winning_team as team,\n        conf,\n        final_seed,\n        COUNT(*) / 10000.0 as occurances\n    FROM cte_final_seeds\n    GROUP BY ALL\n    ORDER BY conf, final_seed, winning_team\n)\nSELECT\n    team,\n    conf,\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 1 ),0) AS \"1_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 2 ),0) AS \"2_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 3 ),0) AS \"3_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 4 ),0) AS \"4_pct1\",\n    SUM(occurances) AS total_pct1\nFROM cte_agg\nGROUP BY ALL\nORDER BY \"1_pct1\" DESC, (\"1_pct1\"+\"2_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\"+\"4_pct1\") DESC","inputQueryString":"WITH cte_final_seeds AS (\n    SELECT\n        ROW_NUMBER() OVER (PARTITION BY Scenario_id, conf \n            ORDER BY conf, made_wildcard, wins desc, pt_diff desc, random()) AS final_seed,\n        *\n    FROM src_tournament_end\n    WHERE (made_tournament = 1 OR made_wildcard = 1)\n),\ncte_agg AS (\n    SELECT\n        winning_team as team,\n        conf,\n        final_seed,\n        COUNT(*) / 10000.0 as occurances\n    FROM cte_final_seeds\n    GROUP BY ALL\n    ORDER BY conf, final_seed, winning_team\n)\nSELECT\n    team,\n    conf,\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 1 ),0) AS \"1_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 2 ),0) AS \"2_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 3 ),0) AS \"3_pct1\",\n    COALESCE(first(occurances) FILTER (WHERE final_seed = 4 ),0) AS \"4_pct1\",\n    SUM(occurances) AS total_pct1\nFROM cte_agg\nGROUP BY ALL\nORDER BY \"1_pct1\" DESC, (\"1_pct1\"+\"2_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\") DESC, (\"1_pct1\"+\"2_pct1\"+\"3_pct1\"+\"4_pct1\") DESC","compiled":false,"inline":false},{"id":"wildcard_standings","compiledQueryString":"SELECT *\nFROM (WITH cte_wins AS (\n    SELECT\n        S.winning_team,\n        COUNT(*) AS wins\n    FROM (SELECT *,\n    CASE\n        WHEN (home_team_win_probability > 5000.0 AND winning_team = home_team)\n            OR (home_team_win_probability < 5000.0 AND winning_team = visiting_team)\n            THEN 1 ELSE 0 END AS 'accurate_guess'\nFROM src_reg_season_predictions\nWHERE include_actuals = true\nORDER BY game_id) S\n    WHERE s.type = 'tournament'\n    GROUP BY ALL\n),\ncte_losses AS (\n    SELECT\n        CASE WHEN S.home_team = S.winning_team \n            THEN S.visiting_team ELSE S.home_team\n        END AS losing_team,\n        COUNT(*) AS losses\n    FROM (SELECT *,\n    CASE\n        WHEN (home_team_win_probability > 5000.0 AND winning_team = home_team)\n            OR (home_team_win_probability < 5000.0 AND winning_team = visiting_team)\n            THEN 1 ELSE 0 END AS 'accurate_guess'\nFROM src_reg_season_predictions\nWHERE include_actuals = true\nORDER BY game_id) S\n    WHERE s.type = 'tournament'\n    GROUP BY ALL\n),\ncte_scores AS (\n    FROM src_nba_results_by_team\n    SELECT\n        team,\n        avg(score) as pts,\n        sum(margin) as margin\n    WHERE type = 'tournament'\n    group by all\n)\nSELECT \n    T.team,\n    '/nba/teams/' || T.team as team_link,\n    T.conf,\n    COALESCE(W.wins,0) AS wins,\n    COALESCE(L.losses,0) as losses,\n    COALESCE(W.wins,0) || '-' || COALESCE(L.losses,0) AS record,\n    coalesce(S.margin,0) as margin,\n    CASE WHEN S.margin > 0 THEN '+' || margin ELSE margin::varchar END AS pt_diff,   \n    T.tournament_group as group,\n    R.won_group AS won_group_pct1,\n    R.made_wildcard AS won_wildcard_pct1,\n    R.made_tournament AS made_tournament_pct1,\n    ROUND(R.wins,1) || '-' || ROUND(R.losses,1) AS proj_record \nFROM src_nba_teams T\n    LEFT JOIN cte_wins W ON W.winning_team = T.team\n    LEFT JOIN cte_losses L ON L .losing_team = T.team\n    LEFT JOIN (SELECT\n    winning_team,\n    tournament_group,\n    sum(made_tournament) / 10000.0 as won_group,\n    sum(made_wildcard) / 10000.0 as made_wildcard,\n    sum(made_tournament) / 10000.0 + sum(made_wildcard) / 10000.0 as made_tournament,\n    avg(wins) as wins,\n    avg(losses) as losses\nFROM src_tournament_end\nGROUP BY ALL\nORDER BY tournament_group, made_tournament DESC) R ON R.winning_team = T.team\n    LEFT JOIN cte_scores S ON S.team = T.team\nGROUP BY ALL\nORDER BY T.tournament_group,  wins DESC, won_group DESC, made_tournament_pct1 DESC, margin DESC)\nORDER BY conf, wins DESC, made_tournament_pct1 DESC, margin DESC","inputQueryString":"SELECT *\nFROM ${tournament_standings}\nORDER BY conf, wins DESC, made_tournament_pct1 DESC, margin DESC","compiled":true,"inline":true}]}