import { s as subscribe, a as set_store_value } from "../../chunks/utils.js";
import { c as create_ssr_component, s as setContext, o as onDestroy, h as escape, d as add_attribute } from "../../chunks/ssr.js";
import { p as page } from "../../chunks/stores2.js";
import { p as pageHasQueries, r as routeHash } from "../../chunks/stores.js";
import { w as writable } from "../../chunks/index2.js";
import "ssf";
import { s as setQueryFunction, I as INPUTS_CONTEXT_KEY, C as CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY } from "../../chunks/buildQuery.js";
import "../../chunks/inferColumnTypes.js";
import "@tidyjs/tidy";
import { p as profile } from "../../chunks/profile.js";
import "debounce";
import { Query } from "@evidence-dev/sdk/usql";
const css = {
  code: ".submit-button.svelte-ca2f1m{border-radius:8px;background-color:#DE4500;border:none;color:lightgrey;padding:2px 6px;text-align:center;text-decoration:none;display:inline-block;font-size:14px;margin:4px 2px;cursor:pointer}",
  map: `{"version":3,"file":"+page.md","sources":["+page.md"],"sourcesContent":["\\n<!-- \\n    MDSvex comes in handy here because it takes frontmatter and shoves it into the metadata object.\\n    This means that all we need to do is build out the expected page metadata\\n-->\\n<!-- Show title as h1 if defined, and not hidden -->\\n{#if typeof metadata !== \\"undefined\\" && (metadata.title || metadata.og?.title) && metadata.hide_title !== true}\\n<h1 class=\\"title\\">{metadata.title ?? metadata.og?.title}</h1>\\n{/if}\\n<svelte:head>\\n<!-- Title has a default case; so we need to handle it in a special way -->\\n{#if typeof metadata !== \\"undefined\\" && (metadata.title || metadata.og?.title)}\\n<title>{metadata.title ?? metadata.og?.title}</title>\\n<meta property=\\"og:title\\" content={metadata.og?.title ?? metadata.title} />\\n<meta name=\\"twitter:title\\" content={metadata.og?.title ?? metadata.title} />\\n{:else}\\n<!-- EITHER there is no metadata, or there is no specified style -->\\n<title>Evidence</title>\\n{/if}\\n\\n<!-- default twitter cardtags -->\\n<meta name=\\"twitter:card\\" content=\\"summary\\" />\\n<meta name=\\"twitter:site\\" content=\\"@evidence_dev\\" />\\n\\n{#if typeof metadata === \\"object\\"}\\n{#if metadata.description || metadata.og?.description}\\n  <meta\\n    name=\\"description\\"\\n    content={metadata.description ?? metadata.og?.description}\\n  />\\n  <meta\\n    property=\\"og:description\\"\\n    content={metadata.og?.description ?? metadata.description}\\n  />\\n  <meta\\n    name=\\"twitter:description\\"\\n    content={metadata.og?.description ?? metadata.description}\\n  />\\n{/if}\\n{#if metadata.og?.image}\\n  <meta property=\\"og:image\\" content={metadata.og?.image} />\\n  <meta name=\\"twitter:image\\" content={metadata.og?.image} />\\n{/if}\\n{/if}\\n</svelte:head>\\n<script context=\\"module\\">\\n\\tconst metadata = {\\"title\\":\\"mdsinabox - a sports monte carlo simulator\\"};\\n\\tconst { title } = metadata; <\/script>\\n<script>\\n        import { page } from '$app/stores';\\n        import { pageHasQueries, routeHash, toasts } from '@evidence-dev/component-utilities/stores';\\n        import { setContext, getContext, beforeUpdate, onDestroy, onMount } from 'svelte';\\n\\t\\timport { writable, get } from 'svelte/store';\\n        \\n        // Functions\\n        import { fmt } from '@evidence-dev/component-utilities/formatting';\\n\\n\\t\\timport { CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY, INPUTS_CONTEXT_KEY } from '@evidence-dev/component-utilities/globalContexts';\\t\\t\\n        \\n        let props;\\n        export { props as data }; // little hack to make the data name not overlap\\n        let { data = {}, customFormattingSettings, __db, inputs } = props;\\n        $: ({ data = {}, customFormattingSettings, __db } = props);\\n\\n        $routeHash = '6666cd76f96956469e7be39d750cc7d9';\\n\\n\\t\\t\\n\\t\\tlet inputs_store = writable(inputs);\\n\\t\\t\\n\\t\\tsetContext(INPUTS_CONTEXT_KEY, inputs_store);\\n\\t\\tonDestroy(inputs_store.subscribe((value) => inputs = value));\\n\\n        $: pageHasQueries.set(Object.keys(data).length > 0);\\n\\n        setContext(CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY, {\\n            getCustomFormats: () => {\\n                return customFormattingSettings.customFormats || [];\\n            }\\n        });\\n\\n\\t\\timport { browser, dev } from \\"$app/environment\\";\\n\\t\\timport { profile } from '@evidence-dev/component-utilities/profile';\\n\\t\\timport debounce from 'debounce';\\n\\t\\timport { Query, hasUnsetValues } from '@evidence-dev/sdk/usql';\\n\\t\\timport { setQueryFunction } from '@evidence-dev/component-utilities/buildQuery';\\n\\n\\t\\tif (!browser) {\\n\\t\\t\\tonDestroy(() => Query.emptyCache());\\n\\t\\t}\\n\\n\\t\\tconst queryFunc = (query, query_name) => profile(__db.query, query, { query_name });\\n\\t\\tsetQueryFunction(queryFunc);\\n\\n\\t\\tconst scoreNotifier = !dev? () => {} : (info) => {\\n\\t\\t\\ttoasts.add({\\n\\t\\t\\t\\tid: Math.random(),\\n\\t\\t\\t\\ttitle: info.id,\\n\\t\\t\\t\\tmessage: \`Results estimated to use \${\\n\\t\\t\\t\\t\\tIntl.NumberFormat().format(info.score / (1024 * 1024))\\n\\t\\t\\t\\t}mb of memory, performance may be impacted\`,\\n\\t\\t\\t\\tstatus: 'warning'\\n\\t\\t\\t}, 5000);\\n\\t\\t};\\n\\n\\t\\t\\n\\t\\tlet inflightQueryTimeout\\n\\t\\tconst onInflightQueriesStart = () => {\\n\\t\\t\\tif (!inflightQueryTimeout) inflightQueryTimeout = setTimeout(() => {\\n\\t\\t\\t\\ttoasts.add({\\n\\t\\t\\t\\t\\tid: 'LoadingToast',\\n\\t\\t\\t\\t\\ttitle: '',\\n\\t\\t\\t\\t\\tmessage: 'Loading...',\\n\\t\\t\\t\\t\\tstatus: 'info'\\n\\t\\t\\t\\t}, 0); // timeout of 0 means forever\\n\\t\\t\\t}, 3000)\\n\\t\\t}\\n\\t\\tconst onInflightQueriesEnd = () => {\\n\\t\\t\\tif (inflightQueryTimeout) {\\n\\t\\t\\t\\tclearTimeout(inflightQueryTimeout)\\n\\t\\t\\t\\tinflightQueryTimeout = null\\n\\t\\t\\t}\\n\\t\\t\\telse toasts.dismiss('LoadingToast')\\n\\t\\t}\\n\\t\\tonMount(() => {\\n\\t\\t\\tQuery.addEventListener('inFlightQueryStart', onInflightQueriesStart)\\n\\t\\t\\tQuery.addEventListener('inFlightQueryEnd', onInflightQueriesEnd)\\n\\t\\t\\tif (Query.QueriesLoading) {\\n\\t\\t\\t\\tonInflightQueriesStart()\\n\\t\\t\\t}\\n\\t\\t\\treturn () => {\\n\\t\\t\\t\\tQuery.removeEventListener('inFlightQueryStart', onInflightQueriesStart)\\n\\t\\t\\t\\tQuery.removeEventListener('inFlightQueryEnd', onInflightQueriesEnd)\\n\\t\\t\\t}\\n\\t\\t})\\n\\n\\t\\tif (import.meta?.hot) {\\n            if (typeof import.meta.hot.data.hmrHasRun === 'undefined') import.meta.hot.data.hmrHasRun = false\\n\\n\\t\\t\\timport.meta.hot.on(\\"evidence:reset-queries\\", async (payload) => {\\n\\t\\t\\t\\tawait $page.data.__db.updateParquetURLs(JSON.stringify(payload.latestManifest), true);\\n\\t\\t\\t\\tQuery.emptyCache()\\n\\t\\t\\t\\t\\n\\t\\t\\t})\\n\\t    }\\n\\t\\t\\n\\t\\tlet params = $page.params;\\n\\t\\t$: params = $page.params;\\n\\t\\t\\n\\t\\tlet _mounted = false;\\n\\t\\tonMount(() => (_mounted = true));\\n\\n        \\n    \\n    let email = \\"\\";\\n    let src = \\"mdsinabox-home\\";\\n    let isClicked = false;\\n\\n    $: prefilledLink = \`https://docs.google.com/forms/d/e/1FAIpQLSeiRdk9saFMRfrgV6k7izrs0SfmpptVd4M6I3tUH9jAumleKQ/formResponse?usp=pp_url&entry.1761363524=\${email}&entry.1932146161=\${src}&submit=Submit\`;\\n\\n    function handleClick() {\\n        isClicked = true;\\n    }\\n\\n<\/script>\\n<style>\\n    .submit-button {\\n        border-radius: 8px;\\n        background-color: #DE4500;\\n        border: none;\\n        color: lightgrey;\\n        padding: 2px 6px;\\n        text-align: center;\\n        text-decoration: none;\\n        display: inline-block;\\n        font-size: 14px;\\n        margin: 4px 2px;\\n        cursor: pointer;\\n    }</style>\\n\\n<!-- \\n<GithubStarCount user='matsonj' repo='nba-monte-carlo'/> -->\\n<p\\n  class=\\"markdown\\"\\n>A fast, free and open-source Modern Data Stack (MDS) that can be fully deployed on your laptop or to a single machine. </p>\\n<p\\n  class=\\"markdown\\"\\n>This project implements a sports Monte Carlo simulator using <a\\n  href=\\"https://duckdb.org/\\"\\n  rel=\\"nofollow\\"\\n  class=\\"markdown\\"\\n>duckdb</a>, <a href=\\"https://www.getdbt.com/\\" rel=\\"nofollow\\" class=\\"markdown\\">dbt</a>, and <a href=\\"https://evidence.dev/\\" rel=\\"nofollow\\" class=\\"markdown\\">evidence</a>. The project is built and run about once per day in a github action. You can learn more about this on the <a\\n  href=\\"https://duckdb.org/2022/10/12/modern-data-stack-in-a-box.html\\"\\n  rel=\\"nofollow\\"\\n  class=\\"markdown\\"\\n>original blog post</a> or on <a href=\\"/about\\" class=\\"markdown\\">the about page</a>.</p>\\n<h3\\n  class=\\"markdown\\"\\n  id=\\"want-to-track-what-i-am-cooking-up-next-join-the-email-list\\"\\n><a\\n  href=\\"#want-to-track-what-i-am-cooking-up-next-join-the-email-list\\"\\n>Want to track what I am cooking up next? Join the email list.</a></h3>\\n<label>\\n    <input\\n        type=\\"email\\" \\n        placeholder=\\"Type your email...\\" \\n        bind:value=\\"{email}\\" \\n        style=\\"border: 2px solid #DE4500; border-radius: 5px;\\"\\n    />\\n</label>\\n<a href=\\"{prefilledLink}\\" target=\\"_blank\\" on:click={handleClick}>\\n    <button class=\\"submit-button\\" disabled={isClicked}>Subscribe</button>\\n</a>\\n<h2 class=\\"markdown\\" id=\\"nba-model\\"><a href=\\"#nba-model\\"><a href=\\"/nba\\" class=\\"markdown\\">NBA Model</a></a></h2>\\n<h2 class=\\"markdown\\" id=\\"nfl-model\\"><a href=\\"#nfl-model\\"><a href=\\"/nfl\\" class=\\"markdown\\">NFL Model</a></a></h2>\\n<h2 class=\\"markdown\\" id=\\"test\\"><a href=\\"#test\\"><a href=\\"/test\\" class=\\"markdown\\">TEST</a></a></h2>\\n<h2 class=\\"markdown\\" id=\\"ncaa-football-model\\"><a href=\\"#ncaa-football-model\\"><a href=\\"/ncaaf\\" class=\\"markdown\\">NCAA Football Model</a></a></h2>\\n\\n"],"names":[],"mappings":"AAqKI,4BAAe,CACX,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,SAAS,CAChB,OAAO,CAAE,GAAG,CAAC,GAAG,CAChB,UAAU,CAAE,MAAM,CAClB,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,YAAY,CACrB,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,MAAM,CAAE,OACZ"}`
};
const metadata = {
  "title": "mdsinabox - a sports monte carlo simulator"
};
let src = "mdsinabox-home";
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let prefilledLink;
  let $page, $$unsubscribe_page;
  let $routeHash, $$unsubscribe_routeHash;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$unsubscribe_routeHash = subscribe(routeHash, (value) => $routeHash = value);
  let { data: props } = $$props;
  let { data = {}, customFormattingSettings, __db, inputs } = props;
  set_store_value(routeHash, $routeHash = "6666cd76f96956469e7be39d750cc7d9", $routeHash);
  let inputs_store = writable(inputs);
  setContext(INPUTS_CONTEXT_KEY, inputs_store);
  onDestroy(inputs_store.subscribe((value) => inputs = value));
  setContext(CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY, {
    getCustomFormats: () => {
      return customFormattingSettings.customFormats || [];
    }
  });
  {
    onDestroy(() => Query.emptyCache());
  }
  const queryFunc = (query, query_name) => profile(__db.query, query, { query_name });
  setQueryFunction(queryFunc);
  $page.params;
  let email = "";
  if ($$props.data === void 0 && $$bindings.data && props !== void 0)
    $$bindings.data(props);
  $$result.css.add(css);
  ({ data = {}, customFormattingSettings, __db } = props);
  {
    pageHasQueries.set(Object.keys(data).length > 0);
  }
  $page.params;
  prefilledLink = `https://docs.google.com/forms/d/e/1FAIpQLSeiRdk9saFMRfrgV6k7izrs0SfmpptVd4M6I3tUH9jAumleKQ/formResponse?usp=pp_url&entry.1761363524=${email}&entry.1932146161=${src}&submit=Submit`;
  $$unsubscribe_page();
  $$unsubscribe_routeHash();
  return `  ${typeof metadata !== "undefined" && metadata.title && metadata.hide_title !== true ? `<h1 class="title">${escape(metadata.title)}</h1>` : ``} ${$$result.head += `<!-- HEAD_svelte-1j2izld_START -->${typeof metadata !== "undefined" && metadata.title ? `${$$result.title = `<title>${escape(metadata.title)}</title>`, ""} <meta property="og:title"${add_attribute("content", metadata.og?.title ?? metadata.title, 0)}> <meta name="twitter:title"${add_attribute("content", metadata.og?.title ?? metadata.title, 0)}>` : ` ${$$result.title = `<title>Evidence</title>`, ""}`}<meta name="twitter:card" content="summary"><meta name="twitter:site" content="@evidence_dev">${typeof metadata === "object" ? `${metadata.description || metadata.og?.description ? `<meta name="description"${add_attribute("content", metadata.description ?? metadata.og?.description, 0)}> <meta property="og:description"${add_attribute("content", metadata.og?.description ?? metadata.description, 0)}> <meta name="twitter:description"${add_attribute("content", metadata.og?.description ?? metadata.description, 0)}>` : ``} ${metadata.og?.image ? `<meta property="og:image"${add_attribute("content", metadata.og?.image, 0)}> <meta name="twitter:image"${add_attribute("content", metadata.og?.image, 0)}>` : ``}` : ``}<!-- HEAD_svelte-1j2izld_END -->`, ""}     <p class="markdown" data-svelte-h="svelte-egxvgs">A fast, free and open-source Modern Data Stack (MDS) that can be fully deployed on your laptop or to a single machine.</p> <p class="markdown" data-svelte-h="svelte-c5bsq7">This project implements a sports Monte Carlo simulator using <a href="https://duckdb.org/" rel="nofollow" class="markdown">duckdb</a>, <a href="https://www.getdbt.com/" rel="nofollow" class="markdown">dbt</a>, and <a href="https://evidence.dev/" rel="nofollow" class="markdown">evidence</a>. The project is built and run about once per day in a github action. You can learn more about this on the <a href="https://duckdb.org/2022/10/12/modern-data-stack-in-a-box.html" rel="nofollow" class="markdown">original blog post</a> or on <a href="/about" class="markdown">the about page</a>.</p> <h3 class="markdown" id="want-to-track-what-i-am-cooking-up-next-join-the-email-list" data-svelte-h="svelte-1oekcb9"><a href="#want-to-track-what-i-am-cooking-up-next-join-the-email-list">Want to track what I am cooking up next? Join the email list.</a></h3> <label><input type="email" placeholder="Type your email..." style="border: 2px solid #DE4500; border-radius: 5px;"${add_attribute("value", email, 0)}></label> <a${add_attribute("href", prefilledLink, 0)} target="_blank"><button class="submit-button svelte-ca2f1m" ${""}>Subscribe</button></a> <h2 class="markdown" id="nba-model" data-svelte-h="svelte-p5q19h"><a href="#nba-model"><a href="/nba" class="markdown">NBA Model</a></a></h2> <h2 class="markdown" id="nfl-model" data-svelte-h="svelte-wx8ozf"><a href="#nfl-model"><a href="/nfl" class="markdown">NFL Model</a></a></h2> <h2 class="markdown" id="test" data-svelte-h="svelte-kfkoda"><a href="#test"><a href="/test" class="markdown">TEST</a></a></h2> <h2 class="markdown" id="ncaa-football-model" data-svelte-h="svelte-rninv2"><a href="#ncaa-football-model"><a href="/ncaaf" class="markdown">NCAA Football Model</a></a></h2>`;
});
export {
  Page as default
};
